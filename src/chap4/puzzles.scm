(load "amb-utils.scm")

(define (distinct? items)
  (cond ((null? items) true)
        ((null? (cdr items)) true)
        ((member (car items) (cdr items)) false)
        (else (distinct? (cdr items)))))

(define (multiple-dwelling)
  (let ((baker    (amb 1 2 3 4 5)) (cooper (amb 1 2 3 4 5))
        (fletcher (amb 1 2 3 4 5)) (miller (amb 1 2 3 4 5))
        (smith    (amb 1 2 3 4 5)))
    (require
     (distinct? (list baker cooper fletcher miller smith)))
    (require (not (= baker 5)))
    (require (not (= cooper 1)))
    (require (not (= fletcher 5)))
    (require (not (= fletcher 1)))
    (require (> miller cooper))
    (require (not (= (abs (- smith fletcher)) 1)))
    (require (not (= (abs (- fletcher cooper)) 1)))
    (list (list 'baker baker)       (list 'cooper cooper)
          (list 'fletcher fletcher) (list 'miller miller)
          (list 'smith smith))))

(define (efficient-multiple-dwelling)
  (let ((cooper (amb 2 3 4 5))
        (miller (amb 3 4 5)))
    (require (> miller cooper))
    (let ((fletcher (amb 2 3 4)))
      (require (not (= (abs (- fletcher cooper)) 1)))
      (let ((smith (amb 1 2 3 4 5)))
        (require (not (= (abs (- smith fletcher)) 1)))
        (let ((baker (amb 1 2 3 4)))
          (require (distinct? (list baker cooper fletcher miller smith)))
          (list (list 'baker baker)       (list 'cooper cooper)
                (list 'fletcher fletcher) (list 'miller miller)
                (list 'smith smith)))))))

(define (liars-puzzle)
  (define (xor p q) (if p (not q) q))
  (let ((betty (amb 1 2 3 4 5))
        (kitty (amb 1 2 3 4 5))
        (ethel (amb 1 2 3 4 5))
        (joan  (amb 1 2 3 4 5))
        (mary  (amb 1 2 3 4 5)))
    (require (distinct? (list betty kitty ethel joan mary)))
    (require (xor (= kitty 2) (= betty 3)))
    (require (xor (= ethel 1) (= joan  2)))
    (require (xor (= ethel 5) (= joan  3)))
    (require (xor (= kitty 2) (= mary  4)))
    (require (xor (= betty 1) (= mary  4)))
    (list (list 'betty betty)
          (list 'kitty kitty)
          (list 'ethel ethel)
          (list 'joan  joan)
          (list 'mary  mary))))

(define (father-puzzle)
  (define father first)
  (define daughter second)
  (define yacht third)
  (let ((moore (list 'moore 'mary-ann 'lorna))
        (hood (list 'hood (amb 'lorna 'rosalind 'melissa) 'gabrielle)))
    (let ((hall (list 'hall (amb 'gabrielle 'lorna 'melissa) 'rosalind)))
      (require (not (eq? (daughter hall) (daughter hood))))
      (let ((downing (list 'downing (amb 'gabrielle 'lorna 'rosalind) 'melissa)))
        (require (eq? (daughter hood) 'melissa))
        (require (not (eq? (daughter hall) 'melissa)))
        (require (not (eq? (daughter downing) (daughter hood))))
        (require (not (eq? (daughter downing) (daughter hall))))
        (let ((parker (list 'parker (amb 'lorna 'rosalind) 'mary-ann))
              (gabrielle-father (amb hall downing)))
          (require (not (eq? (daughter parker) (daughter hood))))
          (require (not (eq? (daughter parker) (daughter hall))))
          (require (not (eq? (daughter parker) (daughter downing))))
          (require (eq? (daughter gabrielle-father) 'gabrielle))
          (require (eq? (daughter parker) (yacht gabrielle-father)))
          (list hood moore downing hall parker))))))

(define (father-puzzle-variation)
  (define father first)
  (define daughter second)
  (define yacht third)
  (let ((moore (list 'moore (amb 'mary-ann 'rosalind 'melissa 'gabrielle) 'lorna))
        (hood (list 'hood (amb 'mary-ann 'lorna 'rosalind 'melissa) 'gabrielle)))
    (require (not (eq? (daughter moore) (daughter hood))))
    (let ((hall (list 'hall (amb 'mary-ann 'gabrielle 'lorna 'melissa) 'rosalind)))
      (require (not (eq? (daughter hall) (daughter moore))))
      (require (not (eq? (daughter hall) (daughter hood))))
      (let ((downing (list 'downing (amb 'mary-ann 'gabrielle 'lorna 'rosalind) 'melissa)))
        (require (eq? (daughter hood) 'melissa))
        (require (not (eq? (daughter moore) 'melissa)))
        (require (not (eq? (daughter hall) 'melissa)))
        (require (not (eq? (daughter downing) (daughter moore))))
        (require (not (eq? (daughter downing) (daughter hood))))
        (require (not (eq? (daughter downing) (daughter hall))))
        (let ((parker (list 'parker (amb 'gabrielle 'lorna 'rosalind) 'mary-ann))
              (gabrielle-father (amb moore hall downing)))
          (require (not (eq? (daughter parker) (daughter moore))))
          (require (not (eq? (daughter parker) (daughter hood))))
          (require (not (eq? (daughter parker) (daughter hall))))
          (require (not (eq? (daughter parker) (daughter downing))))
          (require (eq? (daughter gabrielle-father) 'gabrielle))
          (require (eq? (daughter parker) (yacht gabrielle-father)))
          (list hood moore downing hall parker))))))

(define (queens n)
  (define (new-queen rest-queens)
    (define (check-and-append row column old-column)
      (if (= old-column -1)
          (append rest-queens (list row))
          (let ((old-row (list-ref rest-queens old-column)))
            (require (not (= row old-row)))
            (require (not (= (+ row column) (+ old-row old-column))))
            (require (not (= (- row column) (- old-row old-column))))
            (check-and-append row column (- old-column 1)))))
    (let ((new-column (length rest-queens))
          (q (an-integer-between 1 8)))
      (check-and-append q new-column (- new-column 1))))
  (define (iter result)
    (if (= (length result) n)
        result
        (iter (new-queen result))))
  (iter '()))
